#version=DEVEL
#System authorization information
auth --enableshadow --passalgo=sha512
{% if rhel_os_major_version == '7' %}
repo --name="Server-HighAvailability" --baseurl=file:///run/install/repo/addons/HighAvailability
repo --name="Server-ResilientStorage" --baseurl=file:///run/install/repo/addons/ResilientStorage
# Use text mode install
text
{% elif rhel_os_major_version == '8' %}
repo --name="AppStream" --baseurl=file:///run/install/repo/AppStream
# Use grapical mode install
graphical
{%endif%}
# Use CDROM installation media
cdrom
# Run the Setup Agent on first boot
firstboot --enable
ignoredisk --only-use={{ os_disk }}
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# Reboot after installation
reboot

# Network information
network  --bootproto=static --device={{ qubinode_net_dev }} --gateway={{ qubinode_user_pw }} --ip={{ qubinode_ip_addr }} --nameserver={{ qubinode_nameserver_ip }} --netmask={{ qubinode_netmask }} --onboot=on --ipv6=auto --activate
network  --hostname={{ qubinode_hostname }}

# Enable SELinux
selinux --enforcing

# System services
services --enabled="chronyd"

# Root password
rootpw --iscrypted {{ root_pw }}

# System services
services --enabled="chronyd"

# System timezone
timezone America/New_York --isUtc

# Set Default username
user --name=qubi --password={{ qubinode_user_pw }} --iscrypted --gecos="qubi admin"

# Clear the Master Boot Record
zerombr

# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive={{ os_disk }}

autopart --type=lvm --nohome
# Partition clearing information
clearpart --all --initlabel --drives={{ os_disk }}

%packages --ignoremissing --multilib
@^virtualization-host-environment
@base
@core
@virtualization-hypervisor
@virtualization-client
@virtualization-platform
@virtualization-tools
@development
curl
curl-devel
libguestfs-tools
chrony
kexec-tools
git
git-core
wget
%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%post --nochroot --erroronfail --log=/mnt/sysimage/root/qubinode_installer-post.log
ssh-keygen -t rsa -q -f "/root/.ssh/id_rsa" -N ""

cd /mnt/sysimage/home/{{ qubinode_username }}
wget "{{ qubinode_github }}/{{ git_branch_name }}.zip"
unzip {{ git_branch_name }}.zip
mv qubinode-installer-{{ git_branch_name }} qubinode-installer
%end


%post --nochroot --erroronfail --log=/mnt/sysimage/root/ks-post.log
cp -af /run/install/isodir/iso/{{ qcow_image_file }} /mnt/sysimage/home/{{ qubinode_username }}/qubinode-installer/
%end

%post --log=/mnt/sysimage/root/qubinode_service-post.log
chown -Rf {{ qubinode_username }}:{{ qubinode_username }} /home/{{ qubinode_username }}/qubinode-installer
chmod u+x /home/{{ qubinode_username }}/qubinode-installer/qubinode-installer
cat > /etc/systemd/system/qubinode-installer.service << EOF
[Unit]
Description=Run qubinode installer at first boot
DefaultDependencies=no
Conflicts=shutdown.target
After=systemd-readahead-collect.service systemd-readahead-replay.service systemd-remount-fs.service
Before=getty@tty6.service gdm.service
After=getty@tty6.service gdm.service

[Service]
Type=oneshot
User={{ qubinode_username }}
RemainAfterExit=yes
TTYPath=/dev/tty6
ExecStartPre=/usr/bin/sleep 5
ExecStartPre=/usr/bin/chvt 6
ExecStartPre=/usr/bin/clear
ExecStart=/home/{{ qubinode_username }}/qubinode-installer/qubinode-installer
TimeoutSec=0
StandardOutput=tty
StandardInput=tty
StandardError=tty

[Install]
WantedBy=default.target
EOF
systemctl enable qubinode-installer
%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end
